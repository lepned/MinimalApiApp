@page "/readusers"
@using DataAccess.dbo.Data
@using DataAccess.dbo.DbAccess
@using DataAccess.dbo.Models

@inject ISqlDataAccess sqlDataAccess
@inject IUserService userService

<h3>Read Users</h3>

@if (_users is null)
{
    <h4>Loading ...</h4>
}
else
{
    <div class="row">
        <div class="col-md-8">
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>Id</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Date of Birth</th>
                        <th>Email Address</th>
                        <th></th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var u in _users)
                    {
                        <tr>
                            <td>@u.Id</td>
                            <td>@u.FirstName</td>
                            <td>@u.LastName</td>
                            <td>@u.DoB</td>
                            <td>@u.EmailAddress</td>
                            <td>
                                <button class="btn btn-primary" @onclick="(() => UpdateUser(u.Id))">Update</button>
                            </td>

                            @* Togggle showing the Delete "Confirm Delete" button. *@
                            @if (idToDelete == u.Id)
                            {
                                <button class="btn btn-outline-danger" mx-2 @onclick="(() => DeleteUser(u.Id))" ></button Deletebutton>
                            }
                            else
                            {
                                <button class="btn btn-danger" mx-2 @onclick="(() => idToDelete = u.Id )" ></button Deletebutton>
                            }

                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="col-md-4">
            @if (showEditForm) {
                <UpdateUser Id="@idToUpdate" OnUpdate="HandleOnUpdate"></UpdateUser>
            }
        </div>
    </div>
}

@code {
    protected override async Task OnParametersSetAsync()
    {
        var u = (await userService.GetAll()).ToList<IUserModel>();
        if (u is not null)
        {
            _users = u;
        }
    }

    private void UpdateUser(int id)
    {
        idToUpdate = id;
        showEditForm = true;
    }

    private void HandleOnUpdate(IUserModel user)
    {
        showEditForm = false;
        var userToUpdate = _users.Where(x => x.Id == user.Id).FirstOrDefault();
        if (userToUpdate is not null)
        {
            userToUpdate.FirstName = user.FirstName;
            userToUpdate.LastName = user.LastName;
            userToUpdate.DoB = user.DoB;
            userToUpdate.EmailAddress = user.EmailAddress;
        }
    }

    private async Task DeleteUser(int id)
    {
        var personToDelete = _users.Where(x => x.Id == id).FirstOrDefault();
        if (personToDelete is not null)
        {
            await userService.DeleteUser(id);
            _users.Remove(personToDelete);
            idToDelete = 0;
        }
    }

    private List<IUserModel> _users = new();
    private bool showEditForm = false;
    private int idToUpdate = 0;
    private int idToDelete = 0;
}
